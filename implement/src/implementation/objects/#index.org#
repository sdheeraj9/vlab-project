#+title:  Object  Implementation of Mini Version of User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Initialization

** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
# -*- coding: utf-8 -*-
from op_exceptions import AttributeRequired
from utils import *
#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from datetime import datetime

from src.obj import *
from src.op_exceptions import AttributeRequired

#+END_SRC


** Imports for utility functions

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

import re


#+END_SRC


** Init Files
#+BEGIN_SRC python :tangle ../../src/__init__.py :eval no
import obj
#+END_SRC

#+BEGIN_SRC python :tangle ../../tests/__init__.py :eval no
print "tests package"
#+END_SRC



* Object Model

** Custom Exceptions
   These are some of the custom exceptions used in the application.

*** AttributeRequired

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC




** Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestName(TestCase):
    TESTING = True
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
        self.assertEqual(new_name.value, "J@67697vjhdcs")
        self.assertEqual(new_name.value, "#$%&^   HKJ   5678")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if is_email(value):
            self.value=value
        else:
            raise TypeError("%s is not an Email" % value)
    def __str__(self):
        return self.value
        
#+END_SRC

*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def test_email_type(self):
        print "test_name_type"
        new_email = Email("abc@gmail.com")
        self.assertEqual(new_name.value,"abc@gmail.com")
        self.assertEqual(new_name.value,"abc@vmnv@gmail.com")
        self.assertRaises(TypeError, Email, "qww@fnbnm")
        self.assertEqual(new_name.value,"abcgmail.com")
        
#+END_SRC

** User

*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class User():
    users = [] # this is a static variable, accessed by User.users
    name = none
    email = none
    role = none
#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=[<object of Role>, <object of Role> ...])
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if kwargs is not None:
            for key, value in kwargs.iteritems():
                if key == 'name':
                    self.setName(value)
                if key == 'email':
                    self.setEmail(value)
                if key == 'role':
                    self.setRole(value)
            User.users.append(self)
#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestUser(TestCase):
    TESTING = True

    def test_user_creation_without_role(self):
        print "test_user_creation_without_email"
        with self.assertRaises(AttributeRequired):
            user=User(name=Name(),email=Email())

    def test_user_creation_without_email(self):
        print "test_user_creation_without_role"
        with self.assertRaises(AttributeRequired):
            user=User(name=Name("abc"),role=Role(name=Name("admin")))  

    def test_user_creation_without_email_and_role(self):
        print "test_user_creation_without_role_and_email"
        with self.assertRaises(AttributeRequired):
            user=User(name=Name("abc")) 

    def test_user_creation_with_role(self):
        print "test_user_creation_with_role"
        with self.assertRaises(TypeError):
            user=User(name=Name("abc"),email=Email("abc@gmail.com"),role=Role(name=Name("admin")))
 #+END_SRC


*** Functions

**** setEmail
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_email(self, email):
        if isInstance(email, Email):
            self.email=email
        else:
            raise TypeError("%s is not an email" % value)
#+END_SRC

***** Test

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        if isInstance(name, Name):
            self.name=name
        else:
             raise TypeError("%s is not an name" % value)
#+END_SRC
***** Test

**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, role):
        if isInstance(role, Role):
            self.role = Role()
            role.setRole(role)
        else:
             raise TypeError("%s is not an role" % value)
#+END_SRC
***** Test

**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        self.role = Role()
        return role.getRole()
#+END_SRC
***** Test


**** getEmail
 #+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC


**** getName
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name
#+END_SRC


**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all():
        return User.users
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"

#+END_SRC


**** toClient
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        pass
#        return {
#            'name': self.name,
#            'email': self.email,
#            'role': self.role.to_client()
#        }
#+END_SRC



** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Admin :: An admin is an user who can add, modify and delete other users
        except himself.
   - User :: A User is a user who can view all other users and can modify himself.


*** Mutable Data

     These are the data associated with Role type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Role():

#+END_SRC

roles = []
rol = None
*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if kwargs is not None:
            for key,value in kwargs.iteritems():
                if key == 'name'
                    self.setRole(value)
                else:
                    raise TypeError('%s is not a role!' % value )
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_creation(self):
        print "test_role_creation"
#+END_SRC


*** Functions

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def setRole(self, name):
        if isInstance(name, Name):
            self.rol=name
        else:
            raise TypeError("%s is not an role" % name)
#+END_SRC

****** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_set_name(self):
        print "test_role_set_name"
#+END_SRC


**** getName

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def getRole(self):
        return self.rol
#+END_SRC


**** getAll: Nil --> set[Role]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all():
        pass
#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
 #+END_SRC


**** to_client
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        pass
#+END_SRC

* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC



